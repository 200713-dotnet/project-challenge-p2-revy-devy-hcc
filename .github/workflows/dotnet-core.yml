jobs:
    build_monolith:
      defaults:
        run:
          working-directory: StockJock_Monolith/
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: dotnet build
    
    test_monolith:
      defaults:
        run:
          working-directory: StockJock_Monolith/
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover
  
    analyze_monolith:
      defaults:
        run:
          working-directory: StockJock_Monolith/
      needs: [build_monolith, test_monolith]
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: git fetch --unshallow
        - run: dotnet tool install --global dotnet-sonarscanner
        - run: | 
            dotnet sonarscanner begin -o:'droptophop' -k:'droptophop_RevyDevyP2' -d:sonar.login="d1eeb6dbaaba45e39a73bfe797967c066d30fa8a" -d:sonar.host.url='https://sonarcloud.io/'
            dotnet build
            dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover --logger trx
            dotnet sonarscanner end -d:sonar.login='d1eeb6dbaaba45e39a73bfe797967c066d30fa8a'
          env: 
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    package_monolith:
      defaults:
        run:
          working-directory: StockJock_Monolith/
      env:
        DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
        DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      needs: [analyze_monolith]
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: docker login --username ${DOCKER_LOGIN} --password ${DOCKER_TOKEN}
        - run: docker image build -t stockjock_monolith .
        - run: docker image tag stockjock_monolith hdhopson/stockjock_monolith
        - run: docker image push hdhopson/stockjock_monolith
        - run: docker logout
    
    build_api:
      defaults:
        run:
          working-directory: ApiService/StockJockAPI/StockJockAPI.Client
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: dotnet build
    
    test_api:
      defaults:
        run:
          working-directory: ApiService/StockJockAPI/StockJockAPI.Testing
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover
  
    analyze_api:
      defaults:
        run:
          working-directory: ApiService/StockJockAPI/StockJockAPI.Testing
      needs: [build_api, test_api]
      runs-on: ubuntu-20.04
      steps:
        - uses: actions/checkout@v2.3.1
        - run: git fetch --unshallow
        - run: dotnet tool install --global dotnet-sonarscanner
        - run: | 
            dotnet sonarscanner begin -o:'droptophop' -k:'droptophop_RevyDevyP2' -d:sonar.login="d1eeb6dbaaba45e39a73bfe797967c066d30fa8a" -d:sonar.host.url='https://sonarcloud.io/'
            dotnet build
            dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover --logger trx
            dotnet sonarscanner end -d:sonar.login='d1eeb6dbaaba45e39a73bfe797967c066d30fa8a'
          env: 
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # package_api:
    #   defaults:
    #     run:
    #       working-directory: ApiService/StockJockAPI
    #   env:
    #     DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
    #     DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    #   needs: [analyze_api]
    #   runs-on: ubuntu-20.04
    #   steps:
    #     - uses: actions/checkout@v2.3.1
    #     - run: docker login --username ${DOCKER_LOGIN} --password ${DOCKER_TOKEN}
    #     - run: docker image build -t stockjock_api .
    #     - run: docker image tag stockjock_api hdhopson/stockjock_api
    #     - run: docker image push hdhopson/stockjock_api
    #     - run: docker logout
  
    # deploy:
  
name: cibuild
  
on: push
